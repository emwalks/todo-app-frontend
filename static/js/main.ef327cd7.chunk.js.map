{"version":3,"sources":["components/Header.js","components/Task.js","components/TaskList.js","components/TaskForm.js","components/TaskCounter.js","service/tasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","style","styles","header","React","Component","color","textAlign","paddingTop","paddingBottom","Task","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDeleteClicked","bind","assertThisInitialized","onDoneClicked","onDeleteTaskHandler","TaskId","onDoneTaskHandler","taskStyle","taskStatus","textDecoration","className","taskRow","taskDescription","type","onClick","TaskList","tasks","map","task","i","_React$createElement","components_Task","Description","key","defineProperty","Completed","TaskForm","state","onAddClicked","onTaskTextFieldUpdated","taskToBeAdded","onAddTaskHandler","setState","event","description","target","value","form","taskInputCol","placeholder","onChange","addButtonCol","TaskCounter","counter","numberOfTasks","TasksService","getTasks","_getTasks","asyncToGenerator","regenerator_default","mark","_callee","res","data","wrap","_context","prev","next","axios","get","sent","abrupt","stop","apply","arguments","saveTask","_saveTask","_callee2","_context2","post","_x","doneTask","_doneTask","_callee3","_context3","put","_x2","deleteTask","_deleteTask","_callee4","_context4","delete","_x3","App","addTask","response","insertId","currentListOfTasks","push","updatedListOfTasks","filter","find","components_Header","components_TaskForm","components_TaskCounter","length","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef327cd7.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n        return (<h1 style={styles.header}>Emma's To Do App</h1>);\n    }\n}\n\nconst styles = {\n    header: {\n        color: \"darkblue\",\n        textAlign: \"center\",\n        paddingTop: \"20px\",\n        paddingBottom: \"20px\"\n    }\n};\n\n//render is a function that takes no parameters and returns the embedded html on screen\n//styles for pieces of code are often put alongside the component in react as a json object\n//if you want to share styles between different components can have a separate styles json object and import. However cleaner to keep together\n\nexport default Header;","import React from 'react';\n\nclass Task extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\n        this.onDoneClicked = this.onDoneClicked.bind(this);\n\n    }\n\n    onDeleteClicked() {\n\n        this.props.onDeleteTaskHandler(this.props.TaskId);\n\n    };\n\n    //use the prop taskID in the application of the prop onDeleteTaskHandler\n    //taskId passed from tasklist\n    //task array passed from App into tasklist - pulls out id\n    //onDeleteTaskHandler passed into tasklist then task\n    //grandparent-parent-child - cascading props to components\n    //there are ways to do global state management in react e.g. Context API\n\n\n    onDoneClicked() {\n        this.props.onDoneTaskHandler(this.props.TaskId);\n    };\n\n    render() {\n\n        let taskStyle = {};\n        if (this.props.taskStatus) {\n            taskStyle = {\n                textDecoration: \"line-through\"\n            }\n        }\n\n        //this is react conditional formatting\n\n        return (\n            <div className=\"row\" style={styles.taskRow}>\n\n                <div className=\"col\" style = {taskStyle}>\n                   {this.props.TaskId} - {this.props.taskDescription}\n                </div>\n                <div className=\"col\">\n                    <button type=\"button\" onClick={this.onDoneClicked} className=\"btn btn-info\">Done</button>\n                </div>\n                <div className=\"col\">\n                    <button type=\"button\" onClick={this.onDeleteClicked} className=\"btn btn-danger\">Delete</button>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nconst styles = {\n    taskRow: {\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        textAlign: \"center\"\n    }\n};\n\n\nexport default Task\n\n//the Task code has a property (prop) that once the task description is passed to it it can render. Could be a string/boolen/number etc\n//to style things differently depending on state you need to use conditional rendering","import React from 'react';\n\nimport Task from './Task';\n\nclass TaskList extends React.Component {\n    render() {\n\n        return (\n            <div>\n                {\n\n                    this.props.tasks.map((task, i) =>\n                        <Task TaskId = {task.TaskId} taskDescription={task.Description} key={i}\n                            TaskId={task.TaskId}\n                            taskStatus={task.Completed}\n                            onDeleteTaskHandler={this.props.onDeleteTaskHandler}\n                            onDoneTaskHandler={this.props.onDoneTaskHandler}\n                        />\n                    )\n                }\n            </div>\n        );\n\n    }\n}\n\nexport default TaskList;\n\n//here tasklist is just the conduit for the onDeleteTaskHandler and OnDoneTaskHandler props into Task","import React from 'react';\n\nclass TaskForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            taskDescription: \"\"\n        };\n\n        //this is the event binding function\n        this.onAddClicked = this.onAddClicked.bind(this);\n        this.onTaskTextFieldUpdated = this.onTaskTextFieldUpdated.bind(this);\n    }\n\n    //this function fires when Add button is clicked\n    onAddClicked() {\n\n        const taskToBeAdded = {\n            \n            Description: this.state.taskDescription,\n            Completed: false\n        };\n\n        this.props.onAddTaskHandler(taskToBeAdded);\n\n        // this clears the text box:         \n        this.setState({\n            taskDescription: \"\"\n        });\n    }\n\n    //this function fires when text box is changed\n    onTaskTextFieldUpdated(event) {\n        const description = event.target.value;\n\n        this.setState({\n            taskDescription: description\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"row\" style={styles.form}>\n                <div className=\"col\" style={styles.taskInputCol}>\n                    <input type=\"text\" placeholder=\"You got this!\" value={this.state.taskDescription} onChange={this.onTaskTextFieldUpdated} />\n                </div>\n                <div className=\"col\" style={styles.addButtonCol}>\n                    <button type=\"submit\" onClick={this.onAddClicked} className=\"btn btn-warning\">Add</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst styles = {\n    form: {\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        textAlign: \"center\"\n    },\n    taskInputCol: {\n        textAlign: \"right\"\n    },\n    addButtonCol: {\n        //textAlign : \"left\"\n    }\n\n};\n\nexport default TaskForm","import React from 'react';\n\nclass TaskCounter extends React.Component {\n\n    render() {\n        return (\n            <p style={styles.counter}>You have {this.props.numberOfTasks} task(s) left to do - get on it!</p>\n        );\n    }\n}\n\nconst styles = {\n    counter: {\n        paddingTop: \"5px\",\n        paddingBottom: \"5px\",\n        textAlign: \"center\"\n    }\n};\n\nexport default TaskCounter\n\n//may want to update counter based on taskStatus? if completed = true pass as prop numberofDoneTasks","//this file will provide functionality to call API to get tasks\n\nimport axios from 'axios';\n\n//this is a service class\n//the URL hitting the API is an async. if we didn't have an await we would need a .then\n\nconst TasksService = {\n    async getTasks() {\n        let res = await axios.get(\"https://sdapbu5yz1.execute-api.eu-west-2.amazonaws.com/dev/tasks\");\n        let data = await res.data;\n        return data;\n    },\n\n    //you could add more functions here e.g. async saveTask()\n\n    async saveTask(task) {\n        let res = await axios.post(\"https://sdapbu5yz1.execute-api.eu-west-2.amazonaws.com/dev/tasks\", task);\n        return res.data;\n    },\n\n    async doneTask(TaskId) {\n        let res = await axios.put(\"https://sdapbu5yz1.execute-api.eu-west-2.amazonaws.com/dev/tasks/\" + TaskId);\n        return res.data;\n    },\n\n    async deleteTask(TaskId) {\n        let res = await axios.delete(\"https://sdapbu5yz1.execute-api.eu-west-2.amazonaws.com/dev/tasks/\" + TaskId);\n        return res.data;\n    }\n\n };\n \n export default TasksService;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport TaskList from './components/TaskList';\nimport TaskForm from './components/TaskForm';\nimport TaskCounter from './components/TaskCounter';\nimport TasksService from './service/tasks';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: []\n    };\n\n    this.addTask = this.addTask.bind(this);\n    this.deleteTask = this.deleteTask.bind(this);\n    this.doneTask = this.doneTask.bind(this);\n  }\n\n  async componentDidMount() {\n    const tasks = await TasksService.getTasks();\n    this.setState({tasks: tasks});\n }\n\n //this says when the component mounts run this piece of code\n //gets tasks from db and sets the tasks into state\n\n  async addTask(task) {\n\n    const response = await TasksService.saveTask(task);\n\n    task.TaskId = response.insertId;\n\n    let currentListOfTasks = this.state.tasks;\n    currentListOfTasks.push(task)\n    this.setState({\n      tasks: currentListOfTasks\n    });\n  }\n\n\n  async deleteTask(TaskId) {\n\n    const response = await TasksService.deleteTask(TaskId);\n    \n\n    let currentListOfTasks = this.state.tasks;\n    let updatedListOfTasks = currentListOfTasks.filter(task => task.TaskId !== TaskId)\n    this.setState({\n      tasks: updatedListOfTasks\n    });\n  }\n\n  async doneTask(TaskId) {\n\n    const response = await TasksService.doneTask(TaskId);\n  \n\n\n    let currentListOfTasks = this.state.tasks;\n    let taskToMarkAsDone = currentListOfTasks.find(task => task.TaskId === TaskId)\n    taskToMarkAsDone.Completed = true\n    this.setState({\n      tasks: currentListOfTasks\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <TaskForm onAddTaskHandler={this.addTask} />\n        <TaskCounter numberOfTasks={this.state.tasks.length} />\n        <TaskList tasks={this.state.tasks}\n          onDeleteTaskHandler={this.deleteTask}\n          onDoneTaskHandler={this.doneTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//in html you would have had class= in react it's className\n//the container div is introducing bootstrap into our React App\n\n//the task list now is watching the state defined by constructor above\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}